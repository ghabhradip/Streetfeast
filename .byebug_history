c
n
blog.class
blog
params
c
blog
@blog
c
ac.render_to_string pdf: "email_newsletter", template: "/user_mailer/email_newsletter.html.erb", encoding: "UTF-8",locals: {:blog => @blog}
ac = ActionController::Base.new
@blog = blog
c
@blog = blog
c
@blog = blog
c
rand_record = Blog.first(:conditions => ["id >= ?", rand_id])
rand_id = rand(Blog.count)
c
 Blog.first(:order => "RANDOM()")
c
params
c
params
c
params
c
@pictures = Picture.all
params[:user][:picture][:avatar]
params[:picture][:avatar]
params[:picture]
params[:avatar]
params
c
sort_direction
sort_column
c
sort_column
c
sort_column
c
sort_column
c
sort_direction
sort_column
c
@blog  = Blog.create(blog_params)
c
params[:is_blacklisted].eql? "true"
params[:is_blacklisted]
c
Restaurant.where("is_blacklisted",false)
params[:is_blacklisted].eql? false
Restaurant.where("is_blacklisted",true)
c
Restaurant.where("cuisine LIKE ?", "%#{params[:cuisine]}%").group(:id)
c
Restaurant.all(:conditions =>["cuisine like ?","%#{params[:cuisine]}%"])
c
Restaurant.where("cuisine like :search", search: "#{params[:cuisine]}")
Restaurant.where("cuisine like :search", search: '#{params[:cuisine]}')
Restaurant.where("cuisine like :search", search: "#{params[:cuisine]}")
Restaurant.where("cuisine like :search", search: "%#{params[:cuisine]}%")
Restaurant.where("cuisine like :search", search: "%#{params[:cuisine}%")
c
Restaurant.where("cuisine LIKE ?", params[:cuisine])
c
Restaurant.where("cuisine LIKE", params[:cuisine])
c
Restaurant.where("cuisine LIKE ?", params[:cuisine]).group(:id)
params[:cuisine]
c
Restaurant.where("cuisine LIKE ?", params[:cuisine])
c
Restaurant.where("cuisine like :search",search: "#{params[:cuisine]}")
c
Restaurant.where("cuisine like :search",search: "%#{params[:cuisine]}%")
 params[:cuisine]
c
Restaurant.where("cuisine like :search",search: "%#{params[:cuisine]}%")
c
Restaurant.where("cuisine like :search",search: "%#{params[:cuisine]}%")
c
Restaurant.where("cuisine like :search",search: "%#{params[:cuisine]}%")
restaurant.where("cuisine like :search",search: "%#{params[:cuisine]}%")
restaurant
c
n
c
sort_direction
sort_column
c
sort_direction
sort_column
c
sort_column
c
sort_column
c
sort_column
c
sort_direction
sort_column
c
columns[params[:order]['0'][:column].to_i]
columns = %w[ id issue_description]
c
columns[params[:order]['0'][:column].to_i]
columns = %w[ id issue_description]
c
sort_column
c
sort_direction
sort_column
c
sort_column
c
columns = %w[id]
columns[params[:order]['0'][:column].to_i]
c
columns[params[:order]['0'][:column].to_i]
columns = %w[id issue_description]
c
columns[params[:order]['0'][:column].to_i]
columns = %w[id issue_description]
c
sort_column
sort_direction
c
SupportTicket.order(""id" "desc"")
SupportTicket.order("#{"id"} #{"desc"}")
SupportTicket.order("#{"id} #{"desc"}")
sort_direction
sort_column
c
SupportTicket.order('"id" desc')
SupportTicket.order("id desc")
sort_column
sort_direction
params[:order]['0'][:column]
params[:order]['0'][:coulmn]
c
@support_tickets = SupportTicket.all.order(:id)
c
@support_tickets = SupportTicket.all.order(:id)
c
@support_tickets.page(page).per_page(per_page)
@support_tickets = SupportTicket.all
@support_tickets.page
@support_tickets = @support_tickets.page(page).per_page(per_page)
c
exit
view.class.class
view.class
view
c
params[:is_resolved].present?
c
params[:is_resolved].present?
c
params[:is_resolved]
c
custom
c
SupportTicket.order("3 asc")
c
sort_direction
sort_column
c
sort_direction
sort_column
c
sort_column
c
sort_column
c
sort_direction
sort_column
c
sort_direction
sort_column
@support_tickets = SupportTicket.order("#{sort_column} #{sort_direction}")
c
sort_direction
sort_column
c
sort_column
sort_direction
c
@support_tickets = SupportTicket.order("#{sort_column} asc")
@support_tickets = SupportTicket.order("#{sort_column} #{sort_direction}")
SupportTicket.order("#{sort_column} #{sort_direction}")
sort_direction
sort_directionsort_direction
sort_column
c
columns[params[:order]['0'][:column].to_i].to_i
c
params[:order][:column].to_i
params[:order][:column]
params[:order][]
params[:order][:0.to_s]
params[:order][:0].to_s
params[:order][:0]
params[:order].class
params[:order]
c
params
c
sort_direction
sort_column
c
sort_direction
sort_column
c
@support_tickets = SupportTicket.order("#{sort_column} #{sort_direction}")
c
@support_tickets = SupportTicket.order("#{sort_column} #{sort_direction}")
c
columns[params[:order][:column].to_i].to_i
columns = %w[1 2 3]
columns[params[:order][:column].to_i].to_i
c
columns[params[:order][:column].to_i].to_i
columns[params[:order][:column].to_i]
columns = %w[1 2 3]
c
params[:order][:column]
params[:order][:column].to_i
columns = %w[1 2 3]
c
WHERE "issue_types"."id" = 1 LIMIT 1
c
params[:order][:column]
[params[:order][:column]
[params[:order][:column][params[:order][:column]
columns[params[:order][:column].to_i]
columns = %w[1 2 3]
params[:order][:column]
n
params[:order][:column]
columns[params[:order][:column].to_i]
columns = %w[1 2 3]
c
sort_direction
sort_column
c
columns[params[:order][:column].to_i]
columns[params[:order][:column].to_i]columns[params[:order][:column].to_i]
columns = %w[1 2 3]
c
columns = %w[1 2 3]
c
params[:order][:dir] == "desc" ? "desc" : "asc"
n
